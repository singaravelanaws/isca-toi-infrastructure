pipeline {
    agent any

    parameters {
        string(name: 'SECRET_NAME', description: 'Enter the secret name')
        string(name: 'SECRET_VALUE', description: 'Enter the secret value')
        choice(name: 'ACTION', choices: ['create', 'update'], description: 'Select action: create or update')
        choice(name: 'PROJECT_ID', choices: ['prj-contentportal-dev-389901', 'prj-contentportal-test-389901'], description: 'Select action: choose GCP project ID')
    }

    stages {
        stage('Check and Manage Secret') {
            steps {
                script {
                    def secret_name = params.SECRET_NAME
                    def secret_value = params.SECRET_VALUE
                    def action = params.ACTION
                    def project_id = params.PROJECT_ID

                    sh "gcloud config set project $project_id"

                    switch (action) {
                        case 'create':
                            echo "Creating secret $secret_name in project $project_id."
                            sh "echo '$secret_value' | gcloud secrets create $secret_name --data-file=- --replication-policy=user-managed --locations=asia-south1,asia-south2"
                            echo "Secret $secret_name created with the provided value."
                            break
                        case 'update':
                            def secretExists = sh(script: "gcloud secrets describe $secret_name", returnStatus: true) == 0
                            if (secretExists) {
                                echo "Updating secret $secret_name in project $project_id."

                                // Disable all versions
                                // sh "gcloud secrets versions list $secret_name --format='value(name)' | xargs -I {} gcloud secrets versions disable {} --secret=$secret_name"

                                // Add a new version with the updated value
                                sh "echo '$secret_value' | gcloud secrets versions add $secret_name --data-file=-"
                                echo "Secret $secret_name updated with the provided value."
                            } else {
                                error "Secret $secret_name does not exist. Cannot update."
                            }
                            break
                        default:
                            error "Invalid action: $action. Use 'create' or 'update'."
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
